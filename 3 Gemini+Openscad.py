# -*- coding: utf-8 -*-
"""31.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XB_fYRkJLeQpewVPjyOJTECsbUzafjju
"""

!pip install -q gradio trimesh numpy google-generativeai openai pyvista
!sudo apt-get install -y openscad
!pip install SpeechRecognition pydub
!apt install ffmpeg

import os
import google.generativeai as genai

# Set your Gemini API key here or use input if not set
if not os.getenv("GEMINI_API_KEY"):
    from getpass import getpass
    os.environ["GEMINI_API_KEY"] = getpass("Enter your Gemini API Key: ")

genai.configure(api_key=os.environ["GEMINI_API_KEY"])

from datetime import datetime
import re

def generate_openscad_code_with_gemini(prompt: str):
    model = genai.GenerativeModel("gemini-1.5-pro-latest")
    system_instruction = (
        "You are an expert in 3D modeling using OpenSCAD. "
        "Return only the OpenSCAD code inside triple backticks. No explanations or notes."
    )
    response = model.generate_content(f"{system_instruction}\n\nPrompt: {prompt}")
    text = response.text

    match = re.search(r"```(?:openscad)?\n(.+?)```", text, re.DOTALL)
    openscad_code = match.group(1).strip() if match else text.strip()

    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    scad_file = f"generated_{timestamp}.scad"
    with open(scad_file, "w") as f:
        f.write(openscad_code)

    return scad_file, openscad_code

import subprocess
import trimesh

def convert_to_stl(scad_file):
    stl_file = scad_file.replace(".scad", ".stl")
    subprocess.run(["openscad", "-o", stl_file, scad_file], check=True)
    return stl_file

def load_mesh_as_plotly(stl_file):
    mesh = trimesh.load(stl_file)
    return mesh.show(viewer='window')  # local display OR export as HTML

import gradio as gr
from IPython.display import display, HTML

def run_full_pipeline(input_prompt):
    scad_file, openscad_code = generate_openscad_code_with_gemini(input_prompt)
    stl_file = convert_to_stl(scad_file)
    mesh = trimesh.load(stl_file)
    return openscad_code, scad_file, mesh.show()

with gr.Blocks() as demo:
    gr.Markdown("## üßä Gemini + OpenSCAD 3D Model Generator")

    with gr.Row():
        voice_input = gr.Audio(type="filepath", label="üé§ Voice Prompt (Optional)")
        text_input = gr.Textbox(label="üí¨ Or type your prompt", placeholder="e.g., a sphere with radius 10mm")
    with gr.Column():
        generate_button = gr.Button("üöÄ Generate 3D Model")
    with gr.Row():

     code_output = gr.Code(label="üìê Generated OpenSCAD Code")
     file_output = gr.File(label="üìÇ Download .scad File")
     mesh_output = gr.Model3D(label="üß≠ 3D Preview")

    def pipeline(audio, text):
        from speech_recognition import Recognizer, AudioFile
        import os
        transcript = text
        if audio:
            import speech_recognition as sr
            recog = sr.Recognizer()
            with AudioFile(audio) as source:
                audio_data = recog.record(source)
                transcript = recog.recognize_google(audio_data)
        scad_file, code = generate_openscad_code_with_gemini(transcript)
        stl_file = convert_to_stl(scad_file)
        return code, scad_file, stl_file

    generate_button.click(
        fn=pipeline,
        inputs=[voice_input, text_input],
        outputs=[code_output, file_output, mesh_output]
    )

demo.launch()