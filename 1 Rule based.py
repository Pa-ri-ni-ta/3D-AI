# -*- coding: utf-8 -*-
"""1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GiJCG-5gKfmamwFn-9tM7wMM_BgDrAaS
"""

!pip install cadquery jupyter_cadquery

!pip install gradio

!pip install transformers torch torchvision torchaudio

!pip install trimesh open3d

import gradio as gr
import cadquery as cq
import tempfile
import os
import torch
from PIL import Image
from transformers import BlipProcessor, BlipForConditionalGeneration

# === LOAD MULTIMODAL MODEL (BLIP) ===
device = "cuda" if torch.cuda.is_available() else "cpu"
processor = BlipProcessor.from_pretrained("Salesforce/blip-image-captioning-base")
model = BlipForConditionalGeneration.from_pretrained("Salesforce/blip-image-captioning-base").to(device)

# === TEXT → CAD MODEL FUNCTION ===
import math

def generate_cad_from_text(prompt):
    prompt = prompt.lower()
    wp = cq.Workplane("XY")

    if "cube" in prompt or "box" in prompt:
        part = wp.box(20, 20, 20)
    elif "cuboid" in prompt or "matchbox" in prompt:
        part = wp.box(30, 40, 20)
    elif "cylinder" in prompt or "pipe" in prompt:
        part = wp.circle(10).extrude(30)
    elif "sphere" in prompt or "ball" in prompt:
        part = wp.sphere(10)
    elif "cone" in prompt or "funnel" in prompt:
        part = wp.cone(20, 0, 30)
    elif "torus" in prompt or "donut" in prompt or "ring" in prompt:
        part = wp.torus(15, 5)
    elif "pyramid" in prompt:
        part = cq.Solid.makeCone(0, 20, 30).translate((0, 0, 0))
    elif "hexagon" in prompt or "nut" in prompt:
        part = wp.polygon(6, 20).extrude(15)
    elif "wedge" in prompt:
        part = wp.wedge(30, 20, 20, 10, 10, 20)
    elif "triangular prism" in prompt:
        part = wp.polyline([(0, 0), (20, 0), (10, 15), (0, 0)]).close().extrude(30)
    elif "star" in prompt:
        def star_path(points=5, r1=10, r2=5):
            coords = []
            for i in range(2 * points):
                r = r1 if i % 2 == 0 else r2
                angle = math.pi * i / points
                x = r * math.cos(angle)
                y = r * math.sin(angle)
                coords.append((x, y))
            coords.append(coords[0])
            return coords
        part = wp.polyline(star_path()).close().extrude(5)
    elif "gear" in prompt:
        def gear_profile(teeth=8, radius=10, tooth_depth=2):
            angle = 360 / (teeth * 2)
            points = []
            for i in range(teeth * 2):
                r = radius + tooth_depth if i % 2 == 0 else radius
                a = math.radians(i * angle)
                points.append((r * math.cos(a), r * math.sin(a)))
            return points
        part = wp.polyline(gear_profile()).close().extrude(5)
    elif "arrow" in prompt:
        part = wp.polyline([(0, 0), (15, 0), (15, -5), (25, 5), (15, 15), (15, 10), (0, 10), (0, 0)]).close().extrude(5)
    elif "handle" in prompt or "grip" in prompt:
        part = wp.circle(5).extrude(40)
    elif "hook" in prompt:
        part = wp.center(10, 0).circle(5).revolve(270, (0, 0, 0), (0, 0, 1))
    elif "bracket" in prompt:
        part = (wp.box(40, 5, 5)
                .faces(">Y").workplane().box(5, 30, 5))
    elif "plate" in prompt:
        part = wp.box(60, 60, 2)
    elif "wheel" in prompt or "disc" in prompt:
        part = wp.circle(20).extrude(5)
    elif "bolt" in prompt:
        part = wp.circle(5).extrude(30).faces(">Z").workplane().polygon(6, 12).extrude(5)
    elif "screw" in prompt:
        # Basic spiral screw approximation
        t = cq.Workplane("XY").circle(4).extrude(30)
        thread = t.faces(">Z").workplane().circle(5).revolve(360, (0,0,0), (0,0,1))
        part = t.union(thread)
    elif "cap" in prompt or "lid" in prompt:
        part = wp.circle(15).extrude(5).faces(">Z").workplane().circle(17).extrude(2)
    elif "stand" in prompt or "ring base" in prompt:
        part = wp.torus(20, 4).translate((0, 0, -2))
    elif "arch" in prompt:
        arc = wp.center(0, 0).threePointArc((15, 15), (30, 0)).close().extrude(10)
        part = arc
    elif "elbow" in prompt or "pipe bend" in prompt:
        # Approximate a 90° pipe elbow
        part = wp.center(0, 0).circle(5).revolve(90, (0, 0, 0), (0, 1, 0))
    elif "t-joint" in prompt or "pipe t" in prompt:
        main = wp.circle(5).extrude(30)
        side = wp.center(15, 0).circle(5).extrude(20)
        part = main.union(side)
    else:
        part = wp.box(10, 10, 10)  # fallback

    return part

# === EXPORT TO STL ===
def export_stl(cq_obj):
    with tempfile.NamedTemporaryFile(suffix=".stl", delete=False) as tmpfile:
        cq.exporters.export(cq_obj, tmpfile.name, exportType='STL')
        return tmpfile.name

# === IMAGE CAPTIONING ===
def image_to_prompt(img):
    inputs = processor(images=img, return_tensors="pt").to(device)
    out = model.generate(**inputs)
    caption = processor.decode(out[0], skip_special_tokens=True)
    return caption

# === MAIN PIPELINE ===
def generate_model(text, image=None):
    if image:
        image_prompt = image_to_prompt(image)
        prompt = f"{text}, {image_prompt}"
    else:
        prompt = text

    cad_model = generate_cad_from_text(prompt)
    stl_path = export_stl(cad_model)
    return stl_path

# === UI ===
with gr.Blocks() as demo:

    gr.Markdown("## 3D CAD Model Generator")
    gr.Markdown("Enter a description or upload an image to generate a 3D CAD model.")

    with gr.Row():
        text_input = gr.Textbox(label="Text Description", placeholder="e.g. A small cube, or A vertical cylinder")
        image_input = gr.Image(type="pil", label="Optional Image Input (Sketch)")

    generate_button = gr.Button("Generate 3D Model")
    outputs=output_file = gr.File(label="Download STL File")

    generate_button.click(fn=generate_model, inputs=[text_input, image_input], outputs=output_file)

demo.launch()

